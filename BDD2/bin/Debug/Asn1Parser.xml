<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Asn1Parser</name>
    </assembly>
    <members>
        <member name="T:SysadminsLV.Asn1Parser.Asn1Builder">
            <summary>
            Represents ASN.1 Distinguished Encoding Rules (DER) binary builder.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.#ctor">
            <summary>
                Initializes a new instance of <strong>Asn1Builder</strong> class.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddBoolean(System.Boolean)">
            <summary>
                Adds ASN.1 Boolean value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddInteger(System.Numerics.BigInteger)">
            <summary>
                Adds ASN.1 Integer value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddBitString(System.Byte[],System.Byte)">
            <summary>
                Adds ASN.1 BIT_STRING value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <param name="unusedBits">
                Unused bits in bit string. This value must fall in range between 0 and 7.
            </param>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddBitString(System.Byte[],System.Boolean)">
            <summary>
                Adds ASN.1 BIT_STRING value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <param name="calculateUnusedBits">
                Indicates whether unused bits should be calculated. If set to <strong>false</strong>, unused bits value is set to zero.
            </param>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddOctetString(System.Byte[])">
            <summary>
                Adds ASN.1 OCTET_STRING value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddNull">
            <summary>
                Adds ASN.1 NULL value.
            </summary>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddObjectIdentifier(System.Security.Cryptography.Oid)">
            <summary>
                Adds ASN.1 OBJECT_IDENTIFIER value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddEnumerated(System.UInt64)">
            <summary>
                Adds ASN.1 ENUMERATED value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddUTF8String(System.String)">
            <summary>
                Adds ASN.1 UTF8String value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddSequence(System.Byte[])">
            <summary>
                Adds ASN.1 SEQUENCE value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
            <remarks>
                In the current implementation, SEQUENCE is encoded using constructed form only.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddSet(System.Byte[])">
            <summary>
                Adds ASN.1 SET value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
            <remarks>
                In the current implementation, SET is encoded using constructed form only.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddNumericString(System.String)">
            <summary>
                Adds ASN.1 NumericString value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddPrintableString(System.String)">
            <summary>
                Adds ASN.1 PrintableString value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddTeletexString(System.String)">
            <summary>
                Adds ASN.1 TeletexString (T61String) value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddVideotexString(System.String)">
            <summary>
                Adds ASN.1 VideotexString value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddIA5String(System.String)">
            <summary>
                Adds ASN.1 IA5String value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddUtcTime(System.DateTime)">
            <summary>
                Adds ASN.1 UTC_TIME value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddGeneralizedTime(System.DateTime)">
            <summary>
                Adds ASN.1 GeneralizedTime value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddRfcDateTime(System.DateTime)">
            <summary>
                Adds date time value using <see href="https://tools.ietf.org/html/rfc5280#section-4.1.2.5">RFC 5280 ยง4.1.2.5</see> encoding type.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
            <remarks>
                Dates prior to 2050 year are encoded using <strong>UTC Time</strong> and dates beginning with 2050 year are encoded using
                <strong>Generalized Time</strong>.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddVisibleString(System.String)">
            <summary>
                Adds ASN.1 VisibleString value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddUniversalString(System.String)">
            <summary>
                Adds ASN.1 UniversalString value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddBMPString(System.String)">
            <summary>
                Adds ASN.1 BMP_STRING value.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddDerData(System.Byte[])">
            <summary>
                Adds arbitrary ASN.1-encoded data.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddDerData(System.Byte[],System.Byte)">
            <summary>
                Adds pure raw data (untagged) that is then encoded using specified tag.
            </summary>
            <param name="value">
                Value to encode.
            </param>
            <param name="outerTag">
                Tag number to encode the data with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddImplicit(System.Byte,System.Byte[],System.Boolean)">
            <summary>
            Adds implicitly tagged type. Implicit (IMPLICIT OPTIONAL, CHOICE) must derive from primitive types and cannot be constructed.
            </summary>
            <param name="implicitTag">
                Implicit tag number. This number equals to tag number in square brackets in ASN module definition of IMPLICIT or CHOICE members.
            </param>
            <param name="value">
                Value to encode.
            </param>
            <param name="mustEncode">
                Specifies if data in <strong>value</strong> parameter must be encoded or not. See Remarks for more details.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
                <strong>value</strong> is not encoded.
            </exception>
            <returns>Current instance with added value.</returns>
            <remarks>
                If <strong>mustEncode</strong> parameter is set to <strong>true</strong>, then data in <strong>value</strong> parameter
                is untagged. If <strong>mustEncode</strong> parameter is set to <strong>false</strong>, then data in <strong>value</strong>
                parameter is explicitly tagged and only tag name change is necessary. Caller must have knowledge in advance if value is tagged or not.
                If <strong>mustEncode</strong> parameter is set to <strong>false</strong> and value passed in <strong>value</strong> parameter
                is untagged, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddExplicit(System.Byte,System.Byte[],System.Boolean)">
            <summary>
            Adds explicitly tagged type. Explicit (EXPLICIT OPTIONAL) must have at least one primitive or constructed nested type.
            </summary>
            <param name="explicitTag">
                Explicit tag number. This number equals to tag number in square brackets in ASN module definition of EXPLICIT.
            </param>
            <param name="value">
                Value to encode.
            </param>
            <param name="mustEncode">
                Specifies if data in <strong>value</strong> parameter must be encoded or not. See Remarks for more details.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <strong>value</strong> parameter is null.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
                <strong>value</strong> is not encoded.
            </exception>
            <returns>Current instance with added value.</returns>
            <remarks>
                If <strong>mustEncode</strong> parameter is set to <strong>true</strong>, then data in <strong>value</strong> parameter
                is untagged. If <strong>mustEncode</strong> parameter is set to <strong>false</strong>, then data in <strong>value</strong>
                parameter is explicitly tagged and only tag name change is necessary. Caller must have knowledge in advance if value is tagged or not.
                If <strong>mustEncode</strong> parameter is set to <strong>false</strong> and value passed in <strong>value</strong> parameter
                is untagged, invalid type will be produced.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddBitString(System.Func{SysadminsLV.Asn1Parser.Asn1Builder,SysadminsLV.Asn1Parser.Asn1Builder})">
            <summary>
            Adds constructed bit string.
            </summary>
            <param name="selector">Lambda expression to fill nested content.</param>
            <exception cref="T:System.ArgumentNullException">
                <strong>selector</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
            <remarks>
                In the current implementation, constructed BIT_STRING is encoded using primitive form.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddOctetString(System.Func{SysadminsLV.Asn1Parser.Asn1Builder,SysadminsLV.Asn1Parser.Asn1Builder})">
            <summary>
            Adds constructed octet string.
            </summary>
            <param name="selector">Lambda expression to fill nested content.</param>
            <exception cref="T:System.ArgumentNullException">
                <strong>selector</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
            <remarks>
                In the current implementation, constructed OCTET_STRING is encoded using primitive form.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddSequence(System.Func{SysadminsLV.Asn1Parser.Asn1Builder,SysadminsLV.Asn1Parser.Asn1Builder})">
            <summary>
            Adds constructed SEQUENCE.
            </summary>
            <param name="selector">Lambda expression to fill nested content.</param>
            <exception cref="T:System.ArgumentNullException">
                <strong>selector</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddSet(System.Func{SysadminsLV.Asn1Parser.Asn1Builder,SysadminsLV.Asn1Parser.Asn1Builder})">
            <summary>
            Adds constructed SET.
            </summary>
            <param name="selector">Lambda expression to fill nested content.</param>
            <exception cref="T:System.ArgumentNullException">
                <strong>selector</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.AddExplicit(System.Byte,System.Func{SysadminsLV.Asn1Parser.Asn1Builder,SysadminsLV.Asn1Parser.Asn1Builder})">
            <summary>
            Adds explicitly tagged type. Explicit (EXPLICIT OPTIONAL) must have at least one primitive or constructed nested type.
            </summary>
            <param name="explicitTag">
                Explicit tag number. This number equals to tag number in square brackets in ASN module definition of EXPLICIT.
            </param>
            <param name="selector">Lambda expression to fill nested content.</param>
            <exception cref="T:System.ArgumentNullException">
                <strong>selector</strong> parameter is null.
            </exception>
            <returns>Current instance with added value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.Encode(System.Byte)">
            <summary>
                Gets ASN.1-encoded byte array that represents current state of builder wrapped using outer ASN.1 type and returns new
                builder instance that contains current builder state.
            </summary>
            <param name="outerType">
                Outer type to wrap current state of builder. Outer type must not by the type that is used in primitive form only.
                Default outer type is constructed SEQUENCE (0x30 or decimal 48).
            </param>
            <returns>
                A new instance of ASN.1 DER builder that contains the state of the current instance.
            </returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.GetEncoded(System.Byte)">
            <summary>
                Gets ASN.1-encoded byte array that represents current state of builder wrapped using outer ASN.1 type.
            </summary>
            <param name="outerTag">
                Outer type to wrap current state of builder. Outer type must not by the type that is used in primitive form only.
                Default outer tag is constructed SEQUENCE (0x30 or decimal 48).
            </param>
            <returns>
                ASN.1-encoded byte array.
            </returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.GetRawData">
            <summary>
            Gets a raw data of the current state of the builder.
            </summary>
            <returns>
            Raw data.
            </returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.Create">
            <summary>
            Creates a default instance of <strong>Asn1Builder</strong> class.
            </summary>
            <returns>ASN.1 Builder.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Builder.Create(System.Byte[])">
            <summary>
            Creates a default instance of <strong>Asn1Builder</strong> class from existing ASN.1-encoded data.
            </summary>
            <param name="rawData">ASN.1-encoded data to initialize the builder from.</param>
            <returns>ASN.1 Builder.</returns>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Asn1Class">
            <summary>
            Defines ASN.1 tagging classes.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Class.UNIVERSAL">
            <summary>
            Represents Universal tag class.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Class.CONSTRUCTED">
            <summary>
            Represents Constructed tag class.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Class.APPLICATION">
            <summary>
            Represents Application tag class.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Class.CONTEXT_SPECIFIC">
            <summary>
            <strong>CONTEXT-SPECIFIC</strong> distinguishes members of a sequence or set, the alternatives of a CHOICE, or
            universally tagged set members.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Class.PRIVATE">
            <summary>
            Represents Private tag class.
            </summary>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <summary>
            The exception that is thrown when a data stream contains invalid ASN.1 type or type is not the one client expects.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1InvalidTagException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1InvalidTagException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1InvalidTagException.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1InvalidTagException.#ctor(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1InvalidTagException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the <strong>innerException</strong> parameter is not a null
            reference, the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1InvalidTagException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <remarks>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</remarks>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1InvalidTagException.Offset">
            <summary>
            Gets the offset at which invalid ASN tag appear.
            </summary>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Asn1Reader">
            <summary>
            Provides a set of properties and generic methods to work with ASN.1 structures in Distinguished Encoding
            Rules (<strong>DER</strong>) encoding.
            </summary>
            <remarks>
            Static methods of this class provides an encoders and decoders for the generic .NET types and unmanaged
            structures.
            <para>Static methods (except <see cref="M:SysadminsLV.Asn1Parser.Asn1Utils.Encode(System.Byte[],System.Byte)">Encode</see>) strictly verify
            whether the encoded or source data is valid for the specific ASN.1 type. If the data is not appropriate
            for the method, it throws <see cref="T:System.IO.InvalidDataException"/>
            </para>
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>ASN1</strong> class from an existing
            <strong>ASN1</strong> object.
            </summary>
            <param name="asn">An existing <strong>ASN1</strong> object.</param>
            <remarks>
            	This constructor creates a copy of a current position of an existing <strong>ASN1</strong> object.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <strong>ASN1</strong> class by using an ASN.1 encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:System.ArgumentNullException">
                <strong>rawData</strong> parameter is null reference.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
                The data in the <strong>rawData</strong> parameter is not valid ASN sequence.
            </exception>
            <remarks>
                If <strong>rawData</strong> size is greater than outer structure size, constructor will take only
                required bytes from input data.
            </remarks>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.Offset">
            <summary>
            Gets current position in the byte array stored in <see cref="P:SysadminsLV.Asn1Parser.Asn1Reader.RawData"/> property.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.Tag">
            <summary>
            Gets current structure's tag.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.TagName">
            <summary>
            Gets current structure tag name.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.TagLength">
            <summary>
            Gets current structure full length. Full length contains tag, tag length byte (or bytes) and tag payload.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.PayloadStartOffset">
            <summary>
            Gets a position at which current structure's payload starts (excluding tag and tag length byte (or bytes)).
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.PayloadLength">
            <summary>
            Gets the length of the current structure's payload.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.Length">
            <summary>
            Gets the internal ASN.1 stream length in bytes.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.NextCurrentLevelOffset">
            <summary>
            This property is subject to change.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.NextSiblingOffset">
            <summary>
            Gets next structure's offset at same level (next sibling).
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.NextOffset">
            <summary>
            Gets next structure's offset. If current element is the last element in the data, the property returns zero.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.IsConstructed">
            <summary>
            Indicates whether the current tag is container, so it have children instead of explicit tag value.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.RawData">
            <summary>
            Get's original ASN.1-encoded byte array.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Asn1Reader.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.testNestedForUniversal(System.Int64,System.Int32)">
            <summary>
            Checks if current primitive type is sub-typed (contains nested types) or not.
            </summary>
            <param name="start">Offset position where suggested nested type is expected.</param>
            <param name="estimatedLength">
                Specifies the full length (including header) of suggested nested type.
            </param>
            <returns>
            <strong>True</strong> if current type has proper single nested type, otherwise <strong>False</strong>.
            </returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.calculatePredictLength(System.Int64)">
            <summary>
            Calculates the length for suggested nested type.
            </summary>
            <param name="offset">Start offset for suggested nested type.</param>
            <returns>Estimated full tag length for nested type.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.GetHeader">
            <summary>
            Gets current structure header. Header contains tag and tag length byte (or bytes).
            </summary>
            <returns>Current structure header. Header contains tag and tag length byte (or bytes).</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.GetPayload">
            <summary>
            Gets the byte array of the current structure's payload.
            </summary>
            <returns>Byte array of the current structure's payload</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.GetTagRawData">
            <summary>
            Gets the raw data of the tag, which includes tag, length bytes and payload.
            </summary>
            <returns>A full binary copy of the tag.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.GetRawData">
            <summary>
            Gets a copy of internal ASN.1 stream. The size of the stream is equals to <see cref="P:SysadminsLV.Asn1Parser.Asn1Reader.Length"/> member value.
            </summary>
            <returns>A full binary copy of the internal byte stream.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.GetNestedNodeCount">
            <summary>
            Gets the count of nested nodes under node in the current position.
            </summary>
            <returns>Count of nested nodes.</returns>
            <remarks>For primitive types and empty containers this method returns 0.</remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.MoveNext">
            <summary>
                Moves from the current type to the next type. If current type is container or constructed
                type (<strong>SEQUENCE</strong>, <strong>SEQUENCE OF</strong>, <strong>SET</strong>,
                <strong>SET OF</strong>, <strong>OCTET STRING</strong> or <strong>context-specific</strong>),
                <strong>MoveNext()</strong> method moves to the inner (wrapped) type which starts at the
                container's payload position.
                <para>If the current type is primitive type, <strong>MoveNext()</strong> method seeks over current
                type to the next type.</para>
            </summary>
            <returns>
                <strong>True</strong> if the current type is not the last in the data contained in
                <strong>RawData</strong> property and there are no inner (wrapped) types, otherwise
                <strong>False</strong>
            </returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.MoveNextAndExpectTags(System.Byte[])">
            <summary>
            Moves from the current type to the next type in a tree and checks whether the tag number of next type
            matches one of specified in the <strong>expectedTags</strong> parameter. If current position is the last type
            in the data, or next type's tag doesn't match a list of accepted types, an exception is thrown. See
            exceptions for more details. If the method succeeds, it returns nothing.
            </summary>
            <param name="expectedTags">
            One or more ASN.1 types client expects after moving to next type in ASN.1 tree.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <strong>expectedTags</strong> parameter is null;
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Current position of the reader is the last type in a file.
            </exception>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Reader was able to move to next type, but its identifier doesn't match any accepted type specified in the
            <strong>expectedTags</strong> parameter.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.MoveNextAndExpectTags(SysadminsLV.Asn1Parser.Asn1Type[])">
            <summary>
            Moves from the current type to the next type in a tree and checks whether the tag number of next type
            matches one of specified in the <strong>expectedTags</strong> parameter. If current position is the last type
            in the data, or next type's tag doesn't match a list of accepted types, an exception is thrown. See
            exceptions for more details. If the method succeeds, it returns nothing.
            </summary>
            <param name="expectedTags">
            One or more ASN.1 types client expects after moving to next type in ASN.1 tree.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <strong>expectedTags</strong> parameter is null;
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Current position of the reader is the last type in a file.
            </exception>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Reader was able to move to next type, but its identifier doesn't match any accepted type specified in the
            <strong>expectedTags</strong> parameter.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.MoveNextCurrentLevel">
            <summary>
            Moves over current type to the next type at the same level. If the current type is a
            container (or constructed type), the method skips entire container.
            </summary>
            <returns>
            <strong>True</strong> if the current type is not the last type at the current deepness level (or upper
            level), otherwise <strong>False</strong>.
            </returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.MoveNextSibling">
            <summary>
            Moves over current type to the next type at the same level. If the current type is a
            container (or constructed type), the method skips entire container.
            </summary>
            <returns>
            <strong>True</strong> if the current type is not the last type at the current deepness level (or upper
            level), otherwise <strong>False</strong>.
            </returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.MoveNextCurrentLevelAndExpectTags(System.Byte[])">
            <summary>
            Moves over current type to the next type at the same level and checks whether the tag number of next type
            matches one of specified in the <strong>expectedTags</strong> parameter. If current position is the last type
            in the current array, or next type's tag doesn't match a list of accepted types, an exception is thrown. See
            exceptions for more details. If the method succeeds, it returns nothing.
            </summary>
            <param name="expectedTags">
            One or more ASN.1 types client expects after moving to next type in ASN.1 tree.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <strong>expectedTags</strong> parameter is null;
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Current position of the reader is the last type in a file.
            </exception>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Reader was able to move to next type at same level, but its identifier doesn't match any accepted type
            specified in the <strong>expectedTags</strong> parameter.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.MoveNextSiblingAndExpectTags(System.Byte[])">
            <summary>
            Moves over current type to the next type at the same level and checks whether the tag number of next type
            matches one of specified in the <strong>expectedTags</strong> parameter. If current position is the last type
            in the current array, or next type's tag doesn't match a list of accepted types, an exception is thrown. See
            exceptions for more details. If the method succeeds, it returns nothing.
            </summary>
            <param name="expectedTags">
            One or more ASN.1 types client expects after moving to next type in ASN.1 tree.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <strong>expectedTags</strong> parameter is null;
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Current position of the reader is the last type in a file.
            </exception>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Reader was able to move to next type at same level, but its identifier doesn't match any accepted type
            specified in the <strong>expectedTags</strong> parameter.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.MoveNextSiblingAndExpectTags(SysadminsLV.Asn1Parser.Asn1Type[])">
            <summary>
            Moves over current type to the next type at the same level and checks whether the tag number of next type
            matches one of specified in the <strong>expectedTags</strong> parameter. If current position is the last type
            in the current array, or next type's tag doesn't match a list of accepted types, an exception is thrown. See
            exceptions for more details. If the method succeeds, it returns nothing.
            </summary>
            <param name="expectedTags">
            One or more ASN.1 types client expects after moving to next type in ASN.1 tree.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <strong>expectedTags</strong> parameter is null;
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Current position of the reader is the last type in a file.
            </exception>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Reader was able to move to next type at same level, but its identifier doesn't match any accepted type
            specified in the <strong>expectedTags</strong> parameter.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.MoveToPosition(System.Int32)">
            <summary>
            Moves to a specified start offset.
            </summary>
            <param name="newPosition">ASN structure start position (offset).</param>
            <returns>
            <strong>True</strong> if specified offset is valid and pointer was successfully set to specified position,
            otherwise <strong>False</strong>.
            </returns>
            <remarks>
            Specified position validity is determined based on internal map and <see cref="M:SysadminsLV.Asn1Parser.Asn1Reader.BuildOffsetMap"/>
            method must be called prior to first call of this method. Subsequent <strong>BuildOffsetMap</strong>
            method calls are not necessary.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.Seek(System.Int32)">
            <summary>
            Moves to a specified start offset.
            </summary>
            <param name="newPosition">ASN structure start position (offset).</param>
            <returns>
            <strong>True</strong> if specified offset is valid and pointer was successfully set to specified position,
            otherwise <strong>False</strong>.
            </returns>
            <remarks>
            Specified position validity is determined based on internal map and <see cref="M:SysadminsLV.Asn1Parser.Asn1Reader.BuildOffsetMap"/>
            method must be called prior to first call of this method. Subsequent <strong>BuildOffsetMap</strong>
            method calls are not necessary.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.Reset">
            <summary>
            Moves to the beginning of the file.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.GetTagObject">
            <summary>
            Gets the appropriate primitive tag object from <strong>Universal</strong> namespace, or <see cref="T:SysadminsLV.Asn1Parser.Universal.UniversalTagBase"/> object.
            </summary>
            <returns>ASN.1 object that represents current tag.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.BuildOffsetMap">
            <summary>
            Recursively processes ASN tree and builds internal offset map.
            </summary>
            <returns>A number of processed ASN structures.</returns>
            <remarks>
            This method resets current parser position to zero.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.GetRestrictedTags">
            <summary>
            Gets the list of tags that can be represented in a primitive form only.
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Reader.GetTagName(System.Byte)">
            <summary>
            Gets the formatted tag name.
            </summary>
            <param name="tag">Tag numerical value.</param>
            <returns>Formatted tag name</returns>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Asn1Type">
            <summary>
            Represents an enumeration of ASN.1 types that belong to UNIVERSAL class.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.RESERVED">
            <summary>
            Reserved for BER.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.BOOLEAN">
            <summary>
            The boolean type, declared with the keyword <strong>BOOLEAN</strong>, whose two possible values are
            <strong>TRUE</strong> and <strong>FALSE</strong>.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.INTEGER">
            <summary>
            The integer type, declared in ASN.1 by the keyword <strong>INTEGER</strong>, which stand for any positive or negative
            integer whatever its length.
            <p>Note, however, that this set of values does not include singular values like +&#8734; or
            -&#8734;. These values are members of the REAL type</p></summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.BIT_STRING">
            <summary>
            The <strong>BIT STRING</strong> is used to transmit data that are inherently binary (a compressed facsimile
            or encrypted data, for example) or to model boolean vectors (a list of choices in an MMI window. The BIT STRING
            type should be used only when it is absolutely necessary.
            <p>The binary string can be of null length or arbitrarily long.</p></summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.OCTET_STRING">
            <summary>
            In ASN.1, an octet string, like a binary string, can be arbitrarily long.
            <p>Generally, the <strong>OCTET STRING</strong> type is used to transmit data that are intrinsically
            binary (which can be divided into 8-bit packets)</p></summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.NULL">
            <summary>
            It contains a single value, the value <strong>NULL</strong> (note the ambiguity between the value
            notation and the type notation), which conveys only one piece of information (when the value gets
            through, the receiver knows what semantic should be associated with it).
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.OBJECT_IDENTIFIER">
            <summary>
            An object identifier is an identifier used to name an object (compare URN). Structurally, an OID consists of
            a node in a hierarchically-assigned namespace, formally defined using the ITU-T's ASN.1 standard.
            Successive numbers of the nodes, starting at the root of the tree, identify each node in the tree. Designers
            set up new nodes by registering them under the node's registration authority.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.ObjectDescriptor">
            <summary>
            This string type is derived from the <strong>GraphicString</strong> and <strong>VisibleString</strong> types (see below).
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.EXTERNAL">
            <summary>
            Type <strong>EXTERNAL</strong> takes values that communicate both data and how the data should be interpreted.
            The type of the data need not be an ASN.1 type. <strong>EXTERNAL</strong> is used, for example in the Association
            Control Service Element (ACSE) that is common to all OSI applications, to model a variable whose type is either
            unspecified or specified elsewhere. There is no restriction on the notation to specify the type.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.REAL">
            <summary>
            The real numbers are just like the other real numbers in information technology (decimals).
            <p>The type REAL in ASN.1 can model arbitrarily long but finite decimals.</p></summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.ENUMERATED">
            <summary>
            The type of enumerations is declared with the keyword ENUMERATED.
            <p>For an ENUMERATED type, a number is associated (implicitly or explicitly) with every
            identifier whereas, for an <see cref="F:SysadminsLV.Asn1Parser.Asn1Type.INTEGER">INTEGER</see> type, an identifier is (explicitly) associated with each
            integer.</p></summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.EMBEDDED_PDV">
            <summary>
            <strong>Embedded PDV</strong> was created to carry any values, whether or not it is defined in ASN.1. This type
            has the ability to identify the type and the transfer syntax for the value being carried. ASN.1 has an associated
            type which must be referenced to create an <strong>Embedded PDV</strong> type.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.UTF8String">
            <summary>
            a variable format which encode ASCII characters on one octet (7 bits in fact) accordingly with the IA5 alphabet and
            the others in a sequence of two to six octets.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.RELATIVE_OID">
            <summary>
            <strong>RELATIVE-OID</strong> is used when many transmitted object identifiers denote objects registered in
            the same sub-tree of the registration tree. Otherwise said, all these identifiers relate to a common reference node.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.SEQUENCE">
            <summary>
            Models an ordered collection of variables of different type.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.SET">
            <summary>
            Models an unordered collection of variables of different type.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.NumericString">
            <summary>
            Models data entered from such devices as telephone handsets. Numeric string may contain numeric characters
            0-9 and space character (as per X.401).
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.PrintableString">
            <summary>
            <strong>PrintableString</strong> is an acceptable character set for the DirectoryName data type. PrintableString
            comprises a subset of the ASCII character set, and does not include the at sign (@) or ampersand (&amp;).
            <p>The corresponding alphabet consists of spaces, upper-case and lower-case letters, digits and the symbols
            "'", "(", ")","+", ",", "-", ".", "/", ":", "=" and "?"</p>
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.TeletexString">
            <summary>
            The <strong>Teletex</strong> was designed as a 'super-telex' service for inter-connecting word-processing machines
            according to a page-based transmission mode with an alphabet of 308 characters.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.VideotexString">
            <summary>
            The Videotex system enables the user to visualize on a television screen or any equivalent terminal
            numerical text or graphical information transmitted on the telephone network (pseudographic).
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.IA5String">
            <summary>
            The '<strong>International Alphabet number 5</strong>' (or <strong>IA5</strong>) is based on 7-bit characters and
            was jointly published by ISO and ITU-T (1963). It has become the basic character set of most of the communicating
            systems. It is generally equivalent to the ASCII alphabet (international standard de-facto), but national versions,
            which can take into account accents or characters specific to some spoken languages may be proposed by national
            standardization organizations.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.UTCTime">
            <summary>
            In case the flexibility offered by the various formats of the <strong>GeneralizedTime</strong> is not necessary,
            one may use the <strong>UTCTime</strong> type whose (more restricted) format is the following:
            <list type="number">
            <item> the calendar date with two digits for the year, two for the month and two for the day; and</item>
            <item> the hour, minutes and seconds; and</item>
            <item> either the capital letter 'Z' (Zulu) to indicate that the time is the UTC or a positive or negative delay
            with respect to the UTC.</item>
            </list>
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.GeneralizedTime">
            <summary>
            An extended representation of the Universal Coordinated Time. This format can remove interpretation ambiguities
            of a notation such as 5/12", which means 5th of December" in France and 12th of May" in Anglo-Saxon countries.
            A value of type <strong>GeneralizedTime</strong> is therefore made of:
            <list type="bullet">
            <item>the calendar date with four digits for the year, two for the month and two for an ordinal number standing
            for the day;</item>
            <item>the time with an hour, minute or second precision (or even fractions of a second) according to the precision
            of the communicating application;</item>
            <item>the indication of a possible time lag (the default is the local hour): if it is followed by the letter 'Z' (Zulu),
            it denotes the universal time as the coordinate (UTC); otherwise, the hour is followed by a positive or negative
            time lag expressed in hours and minutes whether it is ahead or behind the UTC.</item>
            </list>
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.GraphicString">
            <summary>
            A character string that can include spaces and any of the graphical (i.e. visible) character sets (called "G")
            registered in the 'International Register of Coded Character Sets to be used with Escape Sequences'.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.VisibleString">
            <summary>
            The ASN.1 character string type VisibleString encompasses all visible characters of the IA5String character set
            but do not include escape characters, newlines or any combination such as those for obtaining the accents with the
            backspace, for example.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.GeneralString">
            <summary>
            GeneralString type is based on all the character sets of the <strong>GraphicString</strong> type described
            above and includes all the control character sets (called "C"). Today, its use is not recommended.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.UniversalString">
            <summary>
            Universal string can contain characters from all the alphabets of all the languages on Earth. Each character
            is encoded by using 4 bytes.
            </summary>
            <remarks>The character set is stratified into 128 groups of 256 planes of 256 rows of 256 cells (i.e. an
            encoding of four bytes at most for each cell). At the moment, only the first plane (38,885 cells), called
            Basic Multilingual Plane or BMP, is allocated (see below BMPString).</remarks>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.CHARACTER_STRING">
            <summary>
            The <strong>CHARACTER STRING</strong> type is the concrete application of the <strong>EMBEDDED PDV</strong> type
            to the special case of a character string.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.BMPString">
            <summary>
            It is useless to encode each character on four bytes since the first two bytes are systematically null and
            all remaining 65,536 cells belong to the first plane (group 0, plane 0) called Basic Multilingual Plane (BMP).
            This encoding on two bytes is called UCS-2.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Asn1Type.TAG_MASK">
            <summary>
            TAG_MASK
            </summary>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Asn1Utils">
            <summary>
            Contains utility methods for ASN.1 data.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.GetLengthBytes(System.Int32)">
            <summary>
            Generates tag length header for specified size.
            </summary>
            <param name="payloadLength">A projected tag length.</param>
            <returns>Encoded tag length header. Return value do not contain tag and payload.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.CalculatePayloadLength(System.Byte[])">
            <summary>
            Calculates the ASN.1 payload length from a given ASN.1 length header.
            </summary>
            <param name="asnHeader">A byte array that represents ASN.1 length header</param>
            <exception cref="T:System.ArgumentNullException">
            <strong>asnHeader</strong> parameter is null.
            </exception>
            <exception cref="T:System.OverflowException">
            <strong>asnHeader</strong> parameter length is more than 4 bytes or is invalid value.
            </exception>
            <returns>ASN.1 payload length in bytes.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.Encode(System.Byte[],System.Byte)">
            <summary>
            Wraps encoded data to an ASN.1 type/structure.
            </summary>
            <remarks>This method do not check whether the data in <strong>rawData</strong> is valid data for specified enclosing type.</remarks>
            <param name="rawData">A byte array to wrap.</param>
            <param name="enclosingTag">An enumeration of <see cref="T:SysadminsLV.Asn1Parser.Asn1Type"/>.</param>
            <returns>Wrapped encoded byte array.</returns>
            <remarks>If <strong>rawData</strong> is null, an empty tag is encoded.</remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeInteger(System.Byte[])">
            <summary>
            Decodes a ASN.1-encoded INTEGER to a unsigned 64-bit integer.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:System.IO.InvalidDataException">The data is not valid ASN.1-encoded integer.</exception>
            <exception cref="T:System.OverflowException">
            The input data exceeds 8 bytes (max bytes that can be allocated for 64-bit integer).
            In order to decode large integers, use <see cref="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeInteger(System.Byte[],System.Boolean)"/> overloaded method.
            </exception>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <returns>Unsigned 64-bit integer.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeInteger(System.Byte[],System.Boolean)">
            <summary>
            Decodes a ASN.1-encoded INTEGER to a hex string that represents ASN.1-encoded integer. This method accepts large integers.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <param name="allowLarge">
            	Specifies whether to allow large integers. If this parameter is set to <strong>True</strong>, method
            	returns integer in a hexadecimal form. If this parameter is set to <strong>False</strong>, method
            	attempts to convert encoded integer to an <see cref="T:System.UInt32"/> numerical value. Numerical value is
            	returned as a string.
            </param>
            <exception cref="T:System.IO.InvalidDataException">The data is not valid ASN.1-encoded integer.</exception>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <returns>A hex string that represents large integer.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeOctetString(System.Byte[])">
            <summary>
            Decodes <strong>OCTET_STRING</strong> as a sequence of hexadecimal octets.
            </summary>
            <param name="rawData">ASN.1-encoded <strong>OCTET_STRING</strong>.</param>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <exception cref="T:System.IO.InvalidDataException">The data is not valid ASN.1-encoded octet string.</exception>
            <returns>A sequence of hexadecimal octets.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeUTCTime(System.DateTime,System.Boolean)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="usePrecise"></param>
            <returns></returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeUTCTime(System.DateTime,System.TimeZoneInfo,System.Boolean)">
            <summary>
            Encodes a .NET DateTime object to a AN1.1-encoded byte array.
            </summary>
            <param name="time">An instance of <see cref="T:System.DateTime"/> object.</param>
            <param name="zone">
            	Specifies the time zone for the value in <strong>time</strong> parameter.
            </param>
            <param name="usePrecise">
                Specifies whether to include milliseconds in encoded value. Default is <strong>False</strong>.
            </param>
            <returns>ASN.1-encoded byte array.</returns>
            <remarks>
            	If <strong>zone</strong> parameter is set to <strong>NULL</strong>, date and time in <strong>time</strong>
            	parameter will be converted to a Zulu time (Universal time). If zone information is not <strong>NULL</strong>,
            	date and time in <strong>time</strong> parameter will be converted to a GMT time and time zone will be added
            	to encoded value.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeGeneralizedTime(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Encodes a .NET DateTime object to a AN1.1-encoded byte array.
            </summary>
            <param name="time">An instance of <see cref="T:System.DateTime"/> object.</param>
            <param name="zone">
            	Specifies the time zone for the value in <strong>time</strong> parameter.
            </param>
            <returns>ASN.1-encoded byte array.</returns>
            <remarks>
            	If <strong>zone</strong> parameter is set to <strong>NULL</strong>, date and time in <strong>time</strong>
            	parameter will be converted to a Zulu time (Universal time). If zone information is not <strong>NULL</strong>,
            	date and time in <strong>time</strong> parameter will be converted to a GMT time and time zone will be added
            	to encoded value.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeGeneralizedTime(System.Byte[])">
            <summary>
            Decodes ASN.1-encoded GeneralizedTime structure to a .NET <see cref="T:System.DateTime"/> object. Returned time is automatically converted to a local time
            (by identifying current zone's information).
            </summary>
            <param name="rawData">Byte array to decode.</param>
            <exception cref="T:System.IO.InvalidDataException">Input data is not correct ASN-encoded Generalized Time.</exception>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <returns>Decoded DateTime object.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeObjectIdentifier(System.Security.Cryptography.Oid)">
            <summary>
            Encodes an instance of <see cref="T:System.Security.Cryptography.Oid"/> class to a ASN.1-encoded byte array that represents <strong>OBJECT IDENTIFIER</strong> type.
            </summary>
            <param name="oid">An instance of <see cref="T:System.Security.Cryptography.Oid"/> class.</param>
            <exception cref="T:System.ArgumentNullException"><strong>oid</strong> parameter is null reference.</exception>
            <exception cref="T:System.ArgumentException">The object identifier is not initialized.</exception>
            <returns>ASN.1-encoded byte array.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeObjectIdentifier(System.Byte[])">
            <summary>
            Decodes ASN.1-encoded object identifier to an instance of generic <see cref="T:System.Security.Cryptography.Oid"/> class.
            </summary>
            <param name="rawData">Byte array to decode.</param>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <exception cref="T:System.IO.InvalidDataException">The data is not properly encoded Object Identifier.</exception>
            <returns>An instance of <see cref="T:System.Security.Cryptography.Oid"/> class contained decoded object identifier.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeBoolean(System.Boolean)">
            <summary>
            Encodes an instance of <see cref="T:System.Boolean"/> class to a ASN.1-encoded byte array that represents <strong>BOOLEAN</strong> type.
            </summary>
            <param name="str">The value to encode. Can be either <strong>True</strong> or <strong>False</strong>.</param>
            <returns>ASN.1-encoded byte array.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeBoolean(System.Byte[])">
            <summary>
            Decodes ASN.1-encoded <strong>BOOLEAN</strong> type to a generic .NET Boolean value.
            </summary>
            <param name="rawData">Byte array to decode.</param>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <exception cref="T:System.ArgumentException">Boolean type cannot be determined.</exception>
            <exception cref="T:System.IO.InvalidDataException">The input data is not properly encoded Boolean.</exception>
            <returns>An instance of <see cref="T:System.Boolean"/> class.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeUTF8String(System.Byte[])">
            <summary>
            Decodes ASN.1-encoded <strong>UTF-8</strong> string to it's textual representation.
            </summary>
            <param name="rawData">ASN.1-encoded UTF-8 string.</param>
            <exception cref="T:System.IO.InvalidDataException">The input data is not properly encoded UTF8String.</exception>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeUTF8String(System.String)">
            <summary>
            Encodes a <strong>UTF-8</strong> string to a ASN.1-encoded byte array.
            </summary>
            <param name="inputString">UTF-8 string to encode.</param>
            <returns>ASN.1-encoded byte array.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeIA5String(System.Byte[])">
            <summary>
            Decodes <strong>IA5String</strong> (also known as ANSI) to it's textual representation.
            </summary>
            <param name="rawData">ASN.1-encoded IA5 string.</param>
            <exception cref="T:System.IO.InvalidDataException">The input data is not properly encoded IA5String.</exception>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeIA5String(System.String)">
            <summary>
            Encodes IA5 string to a ASN.1-encoded byte array.
            </summary>
            <param name="inputString">IA5 (ANSI) string to encode.</param>
            <returns>ASN.1-encoded byte array.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodePrintableString(System.Byte[])">
            <summary>
            Decodes <strong>PrintableString</strong> to it's textual representation.
            </summary>
            <param name="rawData">ASN.1-encoded PrintableString.</param>
            <exception cref="T:System.IO.InvalidDataException">The input data is not properly encoded PrintableString.</exception>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodePrintableString(System.String)">
            <summary>
            Encodes Printable String to a ASN.1-encoded byte array.
            </summary>
            <param name="inputString">Printable String string to encode.</param>
            <exception cref="T:System.IO.InvalidDataException">The string contains invalid character or characters
            and cannot be encoded to a Printable String.
            </exception>
            <returns>ASN.1-encoded byte array.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeTeletexString(System.Byte[])">
            <summary>
            Decodes <strong>TeletexString</strong> to it's textual representation.
            </summary>
            <param name="rawData">ASN.1-encoded TeletexString.</param>
            <exception cref="T:System.IO.InvalidDataException">The input data is not properly encoded TeletexString.</exception>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeTeletexString(System.String)">
            <summary>
            Encodes string to a ASN.1-encoded byte array that represents TeletexString.
            </summary>
            <param name="inputString">String to encode.</param>
            <exception cref="T:System.IO.InvalidDataException">The string contains invalid character or characters
            and cannot be encoded to a TeletexString.
            </exception>
            <returns>ASN.1-encoded byte array.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeVisibleString(System.Byte[])">
            <summary>
            Decodes <strong>VisibleString</strong> to it's textual representation.
            </summary>
            <param name="rawData">ASN.1-encoded VisibleString string.</param>
            <exception cref="T:System.IO.InvalidDataException">The input data is not properly encoded VisibleString.</exception>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeVisibleString(System.String)">
            <summary>
            Encodes visible string to a ASN.1-encoded byte array.
            </summary>
            <param name="inputString">VisibleString string to encode.</param>
            <returns>ASN.1-encoded byte array.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeBMPString(System.Byte[])">
            <summary>
            Decodes <strong>BMPString</strong> (UTF-16) to it's textual representation.
            </summary>
            <param name="rawData">ASN.1-encoded BMP string.</param>
            <exception cref="T:System.IO.InvalidDataException">The input data is not properly encoded BMPString.</exception>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeBMPString(System.String)">
            <summary>
            Encodes UTF-16 string to a ASN.1-encoded byte array.
            </summary>
            <param name="inputString">UTF-16 string to encode.</param>
            <returns>ASN.1-encoded byte array.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.DecodeUniversalString(System.Byte[])">
            <summary>
            Decodes <strong>UniversalString</strong> (UTF-16) to it's textual representation.
            </summary>
            <param name="rawData">ASN.1-encoded UniversalString.</param>
            <exception cref="T:System.IO.InvalidDataException">The input data is not properly encoded UniversalString.</exception>
            <exception cref="T:System.ArgumentNullException"><strong>rawData</strong> parameter is null reference.</exception>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeUniversalString(System.String)">
            <summary>
            Encodes UTF-32 string to a ASN.1-encoded byte array.
            </summary>
            <param name="inputString">UTF-32 string to encode.</param>
            <returns>ASN.1-encoded byte array.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeNull">
            <summary>
            Encodes primitive ASN.1 type of <strong>NULL</strong>.
            </summary>
            <returns>ASN.1-encoded byte array.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeDateTime(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Encodes a .NET DateTime object to a ASN.1-encoded byte array. This method is designed to conform
            <see href="http://tools.ietf.org/html/rfc5280">RFC 5280</see> requirement, so dates before 1950 and
            after 2050 year are required to be encoded by using Generalized Time encoding. UTC Time encoding is not allowed
            for periods beyond 1950 - 2049 years.
            </summary>
            <param name="time">
            An instance of <see cref="T:System.DateTime"/> object.</param> Value in this parameter is treated as local time. 
            <param name="zone">
            	Specifies the time zone for the value in <strong>time</strong> parameter.
            </param>
            <returns>ASN.1-encoded byte array.</returns>
            <remarks>
            	If the <strong>Year</strong> value of the <strong>time</strong> object is less or equals to 2049
                and greater or equals to 1950, the DateTime object is encoded as a UTC time.
                if year value is outside of 1950-2049 range, it is encoded as a generalized time.
            	<para>
            	If <strong>zone</strong> parameter is set to <strong>NULL</strong>, date and time in <strong>time</strong>
            	parameter will be converted to a Zulu time (Universal time). If zone information is not <strong>NULL</strong>,
            	date and time in <strong>time</strong> parameter will be converted to a GMT time and time zone will be added
            	to encoded value.
            	</para>
            </remarks>
            <seealso cref="!:EncodeUTCTime(DateTime, TimeZoneInfo)"/>
            <seealso cref="M:SysadminsLV.Asn1Parser.Asn1Utils.EncodeGeneralizedTime(System.DateTime,System.TimeZoneInfo)"/>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.AsnFormatter">
            <summary>
            This class contains methods to convert Base64, Hex and Binary strings to byte array and vice versa.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.AsnFormatter.BinaryToString(System.Byte[],SysadminsLV.Asn1Parser.EncodingType,SysadminsLV.Asn1Parser.EncodingFormat,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts and formats byte array to a string. See <see cref="T:SysadminsLV.Asn1Parser.EncodingType"/> for encoding examples.
            </summary>
            <param name="rawData">Byte array to format.</param>
            <param name="encoding">Specifies the encoding for formatting. Default is <strong>HexRaw</strong></param>
            <param name="format">
            	Specifies the encoding options. The default behavior is to use a carriage return/line feed
            	(CR/LF) pair (0x0D/0x0A) to represent a new line.
            </param>
            <param name="start">Specifies the start position of the byte array to format. Default is zero.</param>
            <param name="count">Specifies how many bytes must be formatted. If zero, entire byte array will be encoded.</param>
            <param name="forceUpperCase">
            Specifies whether the force hex octet representation in upper case. Default is lower case.
            <para>
            This parameter has effect only when hex encoding is selected in the <strong>encoding</strong> parameter:
            <strong>Hex</strong>, <strong>HexRaw</strong>, <strong>HexAddress</strong>, <strong>HexAscii</strong>
            and <strong>HexAsciiAddress</strong>. For other values, this parameter is silently ignored.
            </para>
            </param>
            <exception cref="T:System.ArgumentException">An invalid encoding type was specified.</exception>
            <returns>Encoded and formatted string.</returns>
            <remarks>
            This method do not support the following encoding types:
            <list type="bullet">
            <item><description>Binary</description></item>
            <item><description>Base64Any</description></item>
            <item><description>StringAny</description></item>
            <item><description>HexAny</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.AsnFormatter.BinaryToString(SysadminsLV.Asn1Parser.Asn1Reader,SysadminsLV.Asn1Parser.EncodingType,SysadminsLV.Asn1Parser.EncodingFormat,System.Boolean)">
            <summary>
            Converts and formats current position af the <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.
            </summary>
            <param name="asn"><see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object in the desired state.</param>
            <param name="encoding">Specifies the encoding for formatting. Default is <strong>HexRaw</strong></param>
            <param name="format">
            	Specifies the encoding options. The default behavior is to use a carriage return/line feed
            	(CR/LF) pair (0x0D/0x0A) to represent a new line.
            </param>
            <param name="forceUpperCase">
            Specifies whether the force hex octet representation in upper case. Default is lower case.
             <para>
            This parameter has effect only when hex encoding is selected in the <strong>encoding</strong> parameter:
            <strong>Hex</strong>, <strong>HexRaw</strong>, <strong>HexAddress</strong>, <strong>HexAscii</strong>
            and <strong>HexAsciiAddress</strong>. For other values, this parameter is silently ignored.
             </para>
             </param>
            <exception cref="T:System.ArgumentException">An invalid encoding type was specified.</exception>
            <returns>Encoded and formatted string.</returns>
            <remarks>
            This method do not support the following encoding types:
            <list type="bullet">
            <item><description>Binary</description></item>
            <item><description>Base64Any</description></item>
            <item><description>StringAny</description></item>
            <item><description>HexAny</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.AsnFormatter.StringToBinary(System.String,SysadminsLV.Asn1Parser.EncodingType)">
            <summary>
            Converts previously formatted string back to a byte array.
            </summary>
            <param name="input">Formatted string</param>
            <param name="encoding">Specifies the string encoding</param>
            <exception cref="T:System.ArgumentException">And invalid encoding is specified.</exception>
            <exception cref="T:System.IO.InvalidDataException">The string cannot be decoded.</exception>
            <returns>Original byte array.</returns>
            <remarks>This method may not be fully compatible with
            <see cref="M:SysadminsLV.Asn1Parser.AsnFormatter.BinaryToString(System.Byte[],SysadminsLV.Asn1Parser.EncodingType,SysadminsLV.Asn1Parser.EncodingFormat,System.Int32,System.Int32,System.Boolean)">BinaryToString</see>
            method.
            </remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.AsnFormatter.TestInputString(System.String)">
            <summary>
            Attempts to determine input string format.
            </summary>
            <param name="input">Formatted string to process.</param>
            <returns>
            Resolved input string format. If format cannot be determined, <string>Binary</string> type is returned.
            </returns>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.EncodingFormat">
            <summary>
            Contains values that specify how line breaks are handled during byte array formatting.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingFormat.CRLF">
            <summary>
            Appends a carriage return/line feed (CR/LF) pair (0x0D/0x0A) to the encoded string.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingFormat.NOCRLF">
            <summary>
            Do not append any new line characters to the encoded string. The default behavior is to use a carriage return/line
            feed (CR/LF) pair (0x0D/0x0A) to represent a new line.
            <para><strong>Windows Server 2003 and Windows XP:</strong> This value is not supported.</para>
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingFormat.NOCR">
            <summary>
            Only use the line feed (LF) character (0x0A) for a new line. The default behavior is to use a CR/LF pair
            (0x0D/0x0A) to represent a new line.
            </summary>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.EncodingType">
            <summary>
            This enumeration contains string formats used in CryptoAPI. See remarks for string formats examples.
            </summary>
            <remarks>
            The following section displays example string formats.
            
            <example><strong>Base64Header</strong>
            <code>
            -----BEGIN CERTIFICATE-----
            MIIEITCCA+CgAwIBAgIUKMmxmDbjbHqt+Yzwj5lflBxuQwEwCQYHKoZIzjgEAzAjMSEwHwYDVQQD
            ExhUb2tlbiBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMTIxMTE2MTgzODMwWhcNMTIxMTIzMTgzODMw
            WjAtMSswKQYDVQQDHiIAYgBiADEANAAxADkAYQAyAGMAZgBjADEAZQAwADAAOAAAMIGfMA0GCSqG
            &lt;...&gt;
            -----END CERTIFICATE-----
            </code>
            </example>
            <example><strong>Base64</strong>
            <code>
            MIIEITCCA+CgAwIBAgIUKMmxmDbjbHqt+Yzwj5lflBxuQwEwCQYHKoZIzjgEAzAjMSEwHwYDVQQD
            ExhUb2tlbiBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMTIxMTE2MTgzODMwWhcNMTIxMTIzMTgzODMw
            WjAtMSswKQYDVQQDHiIAYgBiADEANAAxADkAYQAyAGMAZgBjADEAZQAwADAAOAAAMIGfMA0GCSqG
            &lt;...&gt;
            </code>
            </example>
            <example><strong>Base64RequestHeader</strong>
            <code>
            -----BEGIN NEW CERTIFICATE REQUEST-----
            MIIDBjCCAm8CAQAwcTERMA8GA1UEAxMIcXV1eC5jb20xDzANBgNVBAsTBkJyYWlu
            czEWMBQGA1UEChMNRGV2ZWxvcE1lbnRvcjERMA8GA1UEBxMIVG9ycmFuY2UxEzAR
            BgNVBAgTCkNhbGlmb3JuaWExCzAJBgNVBAYTAlVTMIGfMA0GCSqGSIb3DQEBAQUA
            &lt;...&gt;
            -----END NEW CERTIFICATE REQUEST-----
            </code>
            </example>
            <example><strong>Hex</strong>
            <code>
            3a 20 63 65 72 74 6c 69  62 5c 6c 64 61 70 2e 63
            70 70 28 32 31 33 31 29  3a 20 6c 64 61 70 65 72
            &lt;...&gt;
            </code>
            </example>
            <example><strong>HexAscii</strong>
            <code>
            3a 20 63 65 72 74 6c 69  62 5c 6c 64 61 70 2e 63   : certlib\ldap.c
            70 70 28 32 31 33 31 29  3a 20 6c 64 61 70 65 72   pp(2131): ldaper
            &lt;...&gt;
            </code>
            </example>
            <example><strong>Base64CrlHeader</strong>
            <code>
            -----BEGIN X509 CRL-----
            MIIDBjCCAm8CAQAwcTERMA8GA1UEAxMIcXV1eC5jb20xDzANBgNVBAsTBkJyYWlu
            czEWMBQGA1UEChMNRGV2ZWxvcE1lbnRvcjERMA8GA1UEBxMIVG9ycmFuY2UxEzAR
            BgNVBAgTCkNhbGlmb3JuaWExCzAJBgNVBAYTAlVTMIGfMA0GCSqGSIb3DQEBAQUA
            &lt;...&gt;
            -----END X509 CRL-----
            </code>
            </example>
            <example><strong>HexAddress</strong>
            <code>
            0000  3a 20 63 65 72 74 6c 69  62 5c 6c 64 61 70 2e 63
            0010  70 70 28 32 31 33 31 29  3a 20 6c 64 61 70 65 72
            &lt;...&gt;
            </code>
            </example>
            <example><strong>HexAsciiAddress</strong>
            <code>
            0000  3a 20 63 65 72 74 6c 69  62 5c 6c 64 61 70 2e 63   : certlib\ldap.c
            0010  70 70 28 32 31 33 31 29  3a 20 6c 64 61 70 65 72   pp(2131): ldaper
            &lt;...&gt;
            </code>
            </example>
            <example><strong>HexRaw</strong>
            <code>
            3a20636572746c69625c6c6461702e6370702832313331293a206c6461706572&lt;...&gt;
            </code>
            </example>
            </remarks>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.Base64Header">
            <summary>
            Base64, with certificate beginning and ending headers.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.Base64">
            <summary>
            Base64, without headers.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.Binary">
            <summary>
            Pure binary copy.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.Base64RequestHeader">
            <summary>
            The string is base64 encoded with beginning and ending certificate request headers.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.Hex">
            <summary>
            Hexadecimal only format.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.HexAscii">
            <summary>
            Hexadecimal format with ASCII character display.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.Base64Any">
            <summary>
            Tries the following, in order:
            <list type="bullet">
            <item>Base64Header</item>
            <item>Base64</item>
            </list>
            <strong><see cref="M:SysadminsLV.Asn1Parser.AsnFormatter.BinaryToString(System.Byte[],SysadminsLV.Asn1Parser.EncodingType,SysadminsLV.Asn1Parser.EncodingFormat,System.Int32,System.Int32,System.Boolean)">BinaryToString</see></strong> method do not support this flag.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.StringAny">
            <summary>
            Tries the following, in order:
            <list type="bullet">
            <item>Base64Header</item>
            <item>Base64</item>
            <item>Binary</item>
            </list>
            <strong><see cref="M:SysadminsLV.Asn1Parser.AsnFormatter.BinaryToString(System.Byte[],SysadminsLV.Asn1Parser.EncodingType,SysadminsLV.Asn1Parser.EncodingFormat,System.Int32,System.Int32,System.Boolean)">BinaryToString</see></strong> method do not support this flag.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.HexAny">
            <summary>
            <list type="bullet">
            Tries the following, in order:
            <item>HexAddress</item>
            <item>HexAsciiAddress</item>
            <item>Hex</item>
            <item>HexRaw</item>
            <item>HexAscii</item>
            </list>
            <strong><see cref="M:SysadminsLV.Asn1Parser.AsnFormatter.BinaryToString(System.Byte[],SysadminsLV.Asn1Parser.EncodingType,SysadminsLV.Asn1Parser.EncodingFormat,System.Int32,System.Int32,System.Boolean)">BinaryToString</see></strong> method do not support this flag.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.Base64CrlHeader">
            <summary>
            Base64, with X.509 certificate revocation list (CRL) beginning and ending headers.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.HexAddress">
            <summary>
            Hex, with address display.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.HexAsciiAddress">
            <summary>
            Hex, with ASCII character and address display.
            </summary>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.EncodingType.HexRaw">
            <summary>
            A raw hexadecimal string.
            </summary>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1BitString">
            <summary>
            Represents a <strong>BIT_STRING</strong> ASN.1 tag object.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1BitString.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1BitString</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not <strong>BIT_STRING</strong> data type.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1BitString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1BitString</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not <strong>BIT_STRING</strong> data type.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1BitString.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of <strong>Asn1BitString</strong> from a raw byte array to encode and parameter that indicates
            whether the bit length is decremented to exclude trailing zero bits.
            </summary>
            <param name="valueToEncode">Raw value to encode.</param>
            <param name="calculateUnusedBits">
            <strong>True</strong> if the bit length is decremented to exclude trailing zero bits. Otherwise <strong>False</strong>.
            </param>
            <exception cref="T:System.ArgumentNullException"><strong>valueToEncode</strong> parameter is null reference.</exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1BitString.#ctor(System.Byte[],System.Byte)">
             <summary>
            Initializes a new instance of <strong>Asn1BitString</strong> from a raw byte array to encode and a number of unused bits
            in a current bit string.
            </summary>
            <param name="valueToEncode">Raw value to encode.</param>
            <param name="unusedBits">A number of unused bits in bit string.</param>
            <exception cref="T:System.ArgumentNullException"><strong>valueToEncode</strong> parameter is null reference.</exception>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.Asn1BitString.UnusedBits">
            <summary>
            Gets the count of unused bits in the current <strong>BIT_STRING</strong>.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.Asn1BitString.Value">
            <summary>
            Gets raw value of BIT_STRING without unused bits identifier.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1BitString.GetDisplayValue">
            <summary>
            Gets formatted tag value.
            </summary>
            <returns>Formatted tag value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1BitString.CalculateUnusedBits(System.Byte[])">
            <summary>
            Calculates the number of bits left unused in the final byte of content.
            </summary>
            <param name="bytes">A byte array to process.</param>
            <returns>The number of unused bits.</returns>
            <exception cref="T:System.ArgumentNullException"><strong>bytes</strong> parameter is null reference.</exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1BitString.CalculateUnusedBits(System.Byte)">
            <summary>
            Calculates the number of bits left unused in the specified byte.
            </summary>
            <param name="b">The final byte of content</param>
            <returns>The number of unused bits.</returns>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1BMPString">
            <summary>
            Represents a <strong>BMPString</strong> ASN.1 tag object. <Strong>BMPString</Strong> is a 16-bit unicode
            string where each character is encoded by using two bytes in Big-Endian encoding.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1BMPString.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1BitString</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not <strong>BMPString</strong>.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1BMPString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1BitString</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not <strong>BMPString</strong> data type.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1BMPString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <strong>Asn1BMPString</strong> class from a unicode string.
            </summary>
            <param name="inputString">A unicode string to encode.</param>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1BMPString.GetDisplayValue">
            <inheritdoc/>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1Boolean">
            <summary>
            Represents an ASN.1 <strong>BOOLEAN</strong> data type.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1Boolean.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1Boolean</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not valid <strong>BOOLEAN</strong> data type.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1Boolean.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1Boolean</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not valid <strong>BOOLEAN</strong> data type.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1Boolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <strong>Asn1Boolean</strong> class from a boolean value.
            </summary>
            <param name="fValue">Boolean value to encode.</param>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.Asn1Boolean.Value">
            <summary>
            Gets value associated with the current object.
            </summary>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1DateTime">
            <summary>
            Represents base class for UTCTime and GeneralizedTime ASN.1 types
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1DateTime.#ctor">
            <summary>
            Initializes a new instance of <strong>Asn1DateTime</strong> class.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1DateTime.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of <strong>Asn1DateTime</strong> class from an existing
            <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.
            </summary>
            <param name="asn"><see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object in the position that represents ASN.1 date/time object.</param>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.Asn1DateTime.ZoneInfo">
            <summary>
            Gets the time zone information for the current object.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.Asn1DateTime.Value">
            <summary>
            Gets date/time value associated with the current date/time object.
            </summary>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1Enumerated">
            <summary>
            Represents an ASN.1 <strong>ENUMERATED</strong> data type.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1Enumerated.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1Enumerated</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not valid <strong>INTEGER</strong> data type.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1Enumerated.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1Enumerated</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not valid <strong>INTEGER</strong> data type.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1Enumerated.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <strong>Asn1Enumerated</strong> class from an integer value.
            </summary>
            <param name="inputInteger">Integer value to encode.</param>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.Asn1Enumerated.Value">
            <summary>
            Gets value associated with the current object.
            </summary>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1GeneralizedTime">
            <summary>
            Represents an ASN.1 <strong>GeneralizedTime</strong> data type.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1GeneralizedTime.#ctor(System.DateTime,System.Boolean)">
            <summary>
            Initializes a new instance of the <strong>Asn1GeneralizedTime</strong> class from a date time object
            to encode and value that indicates whether to include millisecond information.
            </summary>
            <param name="time">A <see cref="T:System.DateTime"/> object.</param>
            <param name="preciseTime">
            <strong>True</strong> if encoded value should contain millisecond information, otherwise <strong>False</strong>.
            </param>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1GeneralizedTime.#ctor(System.DateTime,System.TimeZoneInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <strong>Asn1GeneralizedTime</strong> class from a date time object
            to encode, time zone information and value that indicates whether to include millisecond information.
            </summary>
            <param name="time">A <see cref="T:System.DateTime"/> object.</param>
            <param name="zone">A <see cref="T:System.TimeZoneInfo"/> object that represents time zone information.</param>
            <param name="preciseTime">
            <strong>True</strong> if encoded value should contain millisecond information, otherwise <strong>False</strong>.
            </param>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1GeneralizedTime.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1GeneralizedTime</strong> class from an existing
            <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.
            </summary>
            <param name="asn"><see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object in the position that represents Generalized Time.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            The current state of <strong>ASN1</strong> object is not Generalized Time.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1GeneralizedTime.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <strong>Asn1GeneralizedTime</strong> class from a byte array that
            represents encoded UTC time.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            The current state of <strong>ASN1</strong> object is not Generalized Time.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1GeneralizedTime.GetDisplayValue">
            <inheritdoc/>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1IA5String">
            <summary>
            Represents an ASN.1 <strong>IA5String</strong> data type. IA5String contains characters
            from International ASCII character (International Alphabet 5) set.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1IA5String.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1IA5String</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not <strong>IA5String</strong> data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid IA5String character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1IA5String.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1IA5String</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not <strong>IA5String</strong> data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid IA5String character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1IA5String.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <strong>Asn1IA5String</strong> class from a unicode string.
            </summary>
            <param name="inputString">A unicode string to encode.</param>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid IA5String character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1IA5String.GetDisplayValue">
            <inheritdoc/>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1Integer">
            <summary>
            Represents an ASN.1 <strong>INTEGER</strong> data type.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1Integer.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1Integer</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not valid <strong>INTEGER</strong> data type.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1Integer.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1Integer</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not valid <strong>INTEGER</strong> data type.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1Integer.#ctor(System.Numerics.BigInteger)">
            <summary>
            Initializes a new instance of the <strong>Asn1Integer</strong> class from an integer value.
            </summary>
            <param name="inputInteger">Integer value to encode.</param>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.Asn1Integer.Value">
            <summary>
            Gets value associated with the current object.
            </summary>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1Null">
            <summary>
            Represents an ASN.1 <strong>NULL</strong> data type.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1Null.#ctor">
            <summary>
            Initializes a new instance of <strong>Asn1Null</strong> class.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1Null.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1Null</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not valid <strong>NULL</strong> data type.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1Null.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1Null</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not valid <strong>NULL</strong> data type.
            </exception>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1NumericString">
            <summary>
            Represents an ASN.1 <strong>NumericString</strong> data type. NumericString consists of numeric characters
            (0-9) and space.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1NumericString.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1NumericString</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not <strong>NumericString</strong> data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid NumericString character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1NumericString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1NumericString</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not <strong>NumericString</strong> data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid NumericString character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1NumericString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <strong>Asn1NumericString</strong> class from a unicode string.
            </summary>
            <param name="inputString">A unicode string to encode.</param>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid NumericString character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1NumericString.GetDisplayValue">
            <inheritdoc/>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1ObjectIdentifier">
            <summary>
            Represents ASN.1 Object Identifier type.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1ObjectIdentifier.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1ObjectIdentifier</strong> class from an existing
            <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> class instance.
            </summary>
            <param name="asn"><see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object in the position that represents object identifier.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            The current state of <strong>ASN1</strong> object is not object identifier.
            </exception>
            
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1ObjectIdentifier.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <strong>Asn1ObjectIdentifier</strong> class from a byte array
            that represents encoded object identifier.
            </summary>
            <param name="rawData">Byte array that represents encoded object identifier.</param>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1ObjectIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <strong>Asn1ObjectIdentifier</strong> class from a string
            that represents object identifier value.
            </summary>
            <param name="oid">String represents object identifier value.</param>
            <exception cref="T:System.IO.InvalidDataException">The string is not valid object identifier.</exception>
            <exception cref="T:System.OverflowException">The string is too large.</exception>
            <remarks>Maximum object identifier string is 8kb.</remarks>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1ObjectIdentifier.#ctor(System.Security.Cryptography.Oid)">
            <summary>
            Initializes a new instance of the <strong>Asn1ObjectIdentifier</strong> class from an OID object.
            </summary>
            <param name="oid">Object identifier (OID).</param>
            <exception cref="T:System.ArgumentNullException"><strong>oid</strong> parameter is null.</exception>
            <exception cref="T:System.IO.InvalidDataException">The string is not valid object identifier.</exception>
            <exception cref="T:System.OverflowException">The string is too large.</exception>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.Asn1ObjectIdentifier.Value">
            <summary>
            Gets value associated with the current object.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1ObjectIdentifier.GetDisplayValue">
            <inheritdoc/>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1OctetString">
            <summary>
            Represents an ASN.1 <strong>OCTET_STRING</strong> data type.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1OctetString.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1NumericString</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not <strong>NumericString</strong> data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid NumericString character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1OctetString.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of <strong>Asn1NumericString</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <param name="tagged">Boolean value that indicates whether the byte array in <strong>rawData</strong> parameter is encoded or not.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not <strong>NumericString</strong> data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid NumericString character.
            </exception>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.Asn1OctetString.Value">
            <summary>
            Gets value associated with the current object.
            </summary>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1PrintableString">
            <summary>
            Represents an ASN.1 <strong>PrintableString</strong> data type. PrintableString consists of the following
            characters: a-z, A-Z, ' () +,-.?:/= and SPACE.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1PrintableString.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1PrintableString</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not <strong>PrintableString</strong> data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid PrintableString character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1PrintableString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1PrintableString</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not <strong>PrintableString</strong> data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid PrintableString character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1PrintableString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <strong>Asn1PrintableString</strong> class from a unicode string.
            </summary>
            <param name="inputString">A unicode string to encode.</param>
            <exception cref="T:System.IO.InvalidDataException">
            <strong>inputString</strong> contains invalid PrintableString characters
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1PrintableString.GetDisplayValue">
            <inheritdoc />
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1String">
            <summary>
            Represents base class for ASN.1 string types.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1String.#ctor">
            <summary>
            Initializes a new instance of <strong>Asn1String</strong> class.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1String.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of <strong>Asn1String</strong> class from an existing
            <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.
            </summary>
            <param name="asn"><see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object in the position that represents ASN.1 date/time object.</param>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.Asn1String.Value">
            <summary>
            Gets value associated with the current object.
            </summary>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1TeletexString">
            <summary>
            Represents an ASN.1 TeletexString data type. TeletexString may contain characters from T.101 and CCITT, which
            are basically characters encoded with 7-bits (0-127 in ASCII table).
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1TeletexString.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of <strong>Asn1TeletexString</strong> from an ASN reader object.
            </summary>
            <param name="asn">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not <strong>TeletexString</strong>.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid TeletexString character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1TeletexString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1TeletexString</strong> from an ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:System.IO.InvalidDataException">
            <strong>rawData</strong> parameter represents different data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid TeletexString character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1TeletexString.#ctor(System.String)">
            <summary>
            Initializes a new instance of <strong>Asn1TeletexString</strong> from a string that contains valid
            Teletex String characters.
            </summary>
            <param name="inputString"></param>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid TeletexString character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1TeletexString.GetDisplayValue">
            <inheritdoc/>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1UniversalString">
            <summary>
            Represents an ASN.1 <strong>UniversalString</strong> data type. Universal String represents strings where each character
            is encoded using 4 bytes.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UniversalString.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1UniversalString</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not <strong>UniversalString</strong> data type.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UniversalString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1UniversalString</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not <strong>UniversalString</strong> data type.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UniversalString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <strong>Asn1UniversalString</strong> class from a unicode string.
            </summary>
            <param name="inputString">A unicode string to encode.</param>
            <exception cref="T:System.IO.InvalidDataException">
            <strong>inputString</strong> contains invalid PrintableString characters
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UniversalString.GetDisplayValue">
            <inheritdoc/>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1UtcTime">
            <summary>
            Represents ASN.1 <strong>UTCTime</strong> universal tag.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UtcTime.#ctor(System.DateTime,System.Boolean)">
            <summary>
            Initializes a new instance of the <strong>Asn1UtcTime</strong> class from a date time object
            to encode and value that indicates whether to include millisecond information.
            </summary>
            <param name="time">A <see cref="T:System.DateTime"/> object.</param>
            <param name="preciseTime">
            <strong>True</strong> if encoded value should contain millisecond information, otherwise <strong>False</strong>.
            </param>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UtcTime.#ctor(System.DateTime,System.TimeZoneInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <strong>Asn1UtcTime</strong> class from a date time object
            to encode, time zone information and value that indicates whether to include millisecond information.
            </summary>
            <param name="time">A <see cref="T:System.DateTime"/> object.</param>
            <param name="zone">A <see cref="T:System.TimeZoneInfo"/> object that represents time zone information.</param>
            <param name="preciseTime">
            <strong>True</strong> if encoded value should contain millisecond information, otherwise <strong>False</strong>.
            </param>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UtcTime.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1UtcTime</strong> class from an existing
            <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.
            </summary>
            <param name="asn"><see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object in the position that represents UTC time.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            The current state of <strong>ASN1</strong> object is not UTC time.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UtcTime.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <strong>Asn1UtcTime</strong> class from a byte array that
            represents encoded UTC time.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            The current state of <strong>ASN1</strong> object is not UTC time.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UtcTime.GetDisplayValue">
            <summary>
            Gets decoded date/time string value.
            </summary>
            <returns>Decoded date/time string value.</returns>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1UTF8String">
            <summary>
            Represents an ASN.1 <strong>UTF8String</strong> data type. UTF8String consist of 8-bit encoded characters, including control
            characters.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UTF8String.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1UTF8String</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not <strong>UTF8String</strong> data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid UTF8String character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UTF8String.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1UTF8String</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not <strong>UTF8String</strong> data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid UTF8String character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UTF8String.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <strong>Asn1UTF8String</strong> class from a unicode string.
            </summary>
            <param name="inputString">A unicode string to encode.</param>
            <exception cref="T:System.IO.InvalidDataException">
            <strong>inputString</strong> contains invalid UTF8String characters
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1UTF8String.GetDisplayValue">
            <inheritdoc/>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.Asn1VisibleString">
            <summary>
            Represents ASN.1 <strong>VisibleString</strong> data type. VisibleString consist of characters from international
            printing character set. International printing character set contains characters starting from 32 and up to 126
            codes in ASCII character table.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1VisibleString.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of the <strong>Asn1VisibleString</strong> class from an <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            Current position in the <strong>ASN.1</strong> object is not <strong>VisibleString</strong> data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid VisibleString character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1VisibleString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <strong>Asn1VisibleString</strong> from a ASN.1-encoded byte array.
            </summary>
            <param name="rawData">ASN.1-encoded byte array.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1InvalidTagException">
            <strong>rawData</strong> is not <strong>VisibleString</strong> data type.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Input data contains invalid VisibleString character.
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1VisibleString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <strong>Asn1VisibleString</strong> class from a unicode string.
            </summary>
            <param name="inputString">A unicode string to encode.</param>
            <exception cref="T:System.IO.InvalidDataException">
            <strong>inputString</strong> contains invalid VisibleString characters
            </exception>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.Asn1VisibleString.GetDisplayValue">
            <inheritdoc/>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Universal.UniversalTagBase">
            <summary>
            Represents a base class for ASN.1 primitive tag classes. This class provides
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.UniversalTagBase.#ctor">
            <summary>
            Initializes a new instance of <strong>UniversalTagBase</strong> class.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.UniversalTagBase.#ctor(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes a new instance of <strong>UniversalTagBase</strong> from an existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/>
            class instance.
            </summary>
            <param name="asn">Existing <see cref="T:System.ArgumentNullException"/> class instance.</param>
            <exception cref="T:SysadminsLV.Asn1Parser.Asn1Reader"><strong>asn</strong> parameter is null reference.</exception>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.UniversalTagBase.Tag">
            <summary>
            Gets the numeric tag value of the current ASN type.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.UniversalTagBase.TagName">
            <summary>
            Gets the textual name of the ASN tag.
            </summary>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.UniversalTagBase.IsContainer">
            <summary>
            Indicates whether the current structure is container.
            </summary>
            <remarks>
            	The following primitive types cannot have encapsulated types:
            <list type="bullet">
            	<item>BOOLEAN</item>
            	<item>INTEGER</item>
            	<item>NULL</item>
            	<item>OBJECT_IDENTIFIER</item>
            	<item>REAL</item>
            	<item>ENUMERATED</item>
            	<item>RELATIVE-OID</item>
                <item>UTC_TIME</item>
                <item>GeneralizedTime</item>
            </list>
                and any kind of string types:
            <list type="bullet">
            	<item>UTF8String</item>
            	<item>NumericString</item>
            	<item>PrintableString</item>
            	<item>TeletexString</item>
            	<item>VideotexString</item>
            	<item>IA5String-OID</item>
                <item>GraphicString</item>
                <item>VisibleString</item>
                <item>GeneralString</item>
                <item>UniversalString</item>
                <item>CHARACTER_STRING</item>
                <item>BMPString</item>
            </list>
            </remarks>
        </member>
        <member name="P:SysadminsLV.Asn1Parser.Universal.UniversalTagBase.RawData">
            <summary>
            Gets the full tag raw data, including header and payload information.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.UniversalTagBase.Initialize(SysadminsLV.Asn1Parser.Asn1Reader)">
            <summary>
            Initializes <strong>UniversalTagBase</strong> object from an existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.
            </summary>
            <param name="asn">Existing <see cref="T:SysadminsLV.Asn1Parser.Asn1Reader"/> object.</param>
        </member>
        <member name="F:SysadminsLV.Asn1Parser.Universal.UniversalTagBase.InvalidType">
            <summary>
            Constant string to display error message for tag mismatch exceptions.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.UniversalTagBase.GetDisplayValue">
            <summary>
            Gets decoded type value. If the value cannot be decoded, a hex dump is returned.
            </summary>
            <returns>Decoded type value.</returns>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Universal.UniversalTagBase.Format(SysadminsLV.Asn1Parser.EncodingType)">
            <summary>
            Encodes current tag to either, Base64 or hex string.
            </summary>
            <param name="encoding">Specifies the output encoding.</param>
            <returns>Encoded text value.</returns>
        </member>
        <member name="T:SysadminsLV.Asn1Parser.Utils.CLRExtensions.BigIntegerExtensions">
            <summary>
            Extension class for <see cref="T:System.Numerics.BigInteger"/> class.
            </summary>
        </member>
        <member name="M:SysadminsLV.Asn1Parser.Utils.CLRExtensions.BigIntegerExtensions.GetAsnBytes(System.Numerics.BigInteger)">
            <summary>
            Gets a byte array in the big-endian order.
            </summary>
            <param name="bigInteger">An <see cref="T:System.Numerics.BigInteger"/> class instance.</param>
            <returns>Byte array in a big-endian order.</returns>
        </member>
    </members>
</doc>
